#!/usr/bin/env python2

"""
    Xcvrd
    Transceiver information update daemon for SONiC
"""

try:
    import getopt
    import os
    import imp
    import signal
    import subprocess
    import sys
    import syslog
    import time
    import threading
    from swsscommon import swsscommon
except ImportError, e:
    raise ImportError (str(e) + " - required module not found")

#============================= Constants =============================

VERSION = '1.0'

SYSLOG_IDENTIFIER = os.path.basename(__file__)

PLATFORM_ROOT_PATH = '/usr/share/sonic/device'
SONIC_CFGGEN_PATH = '/usr/local/bin/sonic-cfggen'
HWSKU_KEY = 'DEVICE_METADATA.localhost.hwsku'
PLATFORM_KEY = 'DEVICE_METADATA.localhost.platform'

PLATFORM_SPECIFIC_MODULE_NAME = "sfputil"
PLATFORM_SPECIFIC_CLASS_NAME = "SfpUtil"

# Global platform-specific sfputil class instance
platform_sfputil = None

# platform directory in base image
PLATFORM_ROOT = "/usr/share/sonic/device"

# platform root directory inside docker
PLATFORM_ROOT_DOCKER = "/usr/share/sonic/platform"

REDIS_HOSTNAME = "localhost"
REDIS_PORT = 6379
REDIS_TIMEOUT_MSECS = 0
SELECT_TIMEOUT_MSECS = 1000

DOM_INFO_UPDATE_PERIOD_SECS = 60
TIME_FOR_SFP_READY_SECS = 1
RETRIES_FOR_SPF_READY = 5
XCVRD_MAIN_THREAD_SLEEP_MSECS = 60000

RETRY_TIMES_FOR_SYSTEM_READY = 24
RETRY_PERIOD_FOR_SYSTEM_READY_MSECS = 5000

RETRY_TIMES_FOR_SYSTEM_FAIL = 24
RETRY_PERIOD_FOR_SYSTEM_FAIL_MSECS = 5000

SFP_STATUS_INSERTED = '1'
SFP_STATUS_REMOVED = '0'

EVENT_ON_ALL_SFP = '-1'
# events definition
SYSTEM_NOT_READY = 'system_not_ready'
SYSTEM_BECOME_READY = 'system_become_ready'
SYSTEM_FAIL = 'system_fail'
NORMAL_EVENT = 'normal'
# states definition
STATE_INIT = 0
STATE_NORMAL = 1
STATE_EXIT = 2

SFP_EEPROM_HANDLE_SUCCESS = 0
PHYSICAL_PORT_NOT_EXIST = -1
SFP_EEPROM_NOT_READY = -2

TEMP_UNIT = 'C'
VOLT_UNIT = 'Volts'
POWER_UNIT = 'dBm'
BIAS_UNIT = 'mA'

XCVRD_MAIN_TASK_RUNNING_FLAG = True

#========================== Syslog wrappers ==========================

def log_info(msg, also_print_to_console=False):
    syslog.openlog(SYSLOG_IDENTIFIER)
    syslog.syslog(syslog.LOG_INFO, msg)
    syslog.closelog()

    if also_print_to_console:
        print msg

def log_warning(msg, also_print_to_console=False):
    syslog.openlog(SYSLOG_IDENTIFIER)
    syslog.syslog(syslog.LOG_WARNING, msg)
    syslog.closelog()

    if also_print_to_console:
        print msg

def log_error(msg, also_print_to_console=False):
    syslog.openlog(SYSLOG_IDENTIFIER)
    syslog.syslog(syslog.LOG_ERR, msg)
    syslog.closelog()

    if also_print_to_console:
        print msg

#========================== Signal Handling ==========================

def signal_handler(sig, frame):
    global XCVRD_MAIN_TASK_RUNNING_FLAG
    if sig == signal.SIGHUP:
        log_info("Caught SIGHUP - ignoring...")
        return
    elif sig == signal.SIGINT:
        log_info("Caught SIGINT - exiting...")
        XCVRD_MAIN_TASK_RUNNING_FLAG = False
    elif sig == signal.SIGTERM:
        log_info("Caught SIGTERM - exiting...")
        XCVRD_MAIN_TASK_RUNNING_FLAG = False
    else:
        log_warning("Caught unhandled signal '" + sig + "'")
        return


#============ Functions to load platform-specific classes ============

# Returns platform and HW SKU
def get_platform_and_hwsku():
    proc = subprocess.Popen([SONIC_CFGGEN_PATH, '-H', '-v', PLATFORM_KEY],
                            stdout=subprocess.PIPE,
                            shell=False,
                            stderr=subprocess.STDOUT)
    stdout = proc.communicate()[0]
    proc.wait()
    platform = stdout.rstrip('\n')

    proc = subprocess.Popen([SONIC_CFGGEN_PATH, '-d', '-v', HWSKU_KEY],
                            stdout=subprocess.PIPE,
                            shell=False,
                            stderr=subprocess.STDOUT)
    stdout = proc.communicate()[0]
    proc.wait()
    hwsku = stdout.rstrip('\n')

    return (platform, hwsku)

# Loads platform specific sfputil module from source
def load_platform_sfputil():
    global platform_sfputil

    # Get platform and hwsku
    (platform, hwsku) = get_platform_and_hwsku()

    # Load platform module from source
    platform_path = PLATFORM_ROOT_DOCKER
    hwsku_path = "/".join([platform_path, hwsku])

    try:
        module_file = "/".join([platform_path, "plugins", PLATFORM_SPECIFIC_MODULE_NAME + ".py"])
        module = imp.load_source(PLATFORM_SPECIFIC_MODULE_NAME, module_file)
    except IOError, e:
        log_error("Failed to load platform module '%s': %s" % (PLATFORM_SPECIFIC_MODULE_NAME, str(e)), True)
        return -1

    try:
        platform_sfputil_class = getattr(module, PLATFORM_SPECIFIC_CLASS_NAME)
        platform_sfputil = platform_sfputil_class()
    except AttributeError, e:
        log_error("Failed to instantiate '%s' class: %s" % (PLATFORM_SPECIFIC_CLASS_NAME, str(e)), True)
        return -2

    return 0

# Returns path to port config file
def get_path_to_port_config_file():
    # Get platform and hwsku
    (platform, hwsku) = get_platform_and_hwsku()

    # Load platform module from source
    platform_path = PLATFORM_ROOT_DOCKER
    hwsku_path = "/".join([platform_path, hwsku])

    # First check for the presence of the new 'port_config.ini' file
    port_config_file_path = "/".join([hwsku_path, "port_config.ini"])
    if not os.path.isfile(port_config_file_path):
        # port_config.ini doesn't exist. Try loading the legacy 'portmap.ini' file
        port_config_file_path = "/".join([hwsku_path, "portmap.ini"])

    return port_config_file_path

# find out the underneath physical port list by logical name
def logical_port_name_to_physical_port_list(port_name):
    if port_name.startswith("Ethernet"):
        if platform_sfputil.is_logical_port(port_name):
            return platform_sfputil.get_logical_to_physical(port_name)
        else:
            print "Error: Invalid port '%s'" % port_name
            return None
    else:
        return [int(port_name)]

# Returns,
#   port_num if physical
#   logical_port:port_num if logical port and is a ganged port
#   logical_port if logical and not ganged
def get_physical_port_name(logical_port, physical_port, ganged):
    if logical_port == physical_port:
        return logical_port
    elif ganged:
        return logical_port + ":%d (ganged)" % physical_port
    else:
        return logical_port

def strip_unit_and_beautify(value, unit):
    # Strip unit from raw data
    width = len(unit)
    if value[-width:] == unit:
        value = value[:-width]

    return value

# Remove unnecessary unit from the raw data
def beautify_dom_info_dict(dom_info_dict):
    dom_info_dict['temperature'] = strip_unit_and_beautify(dom_info_dict['temperature'], TEMP_UNIT)
    dom_info_dict['voltage'] = strip_unit_and_beautify(dom_info_dict['voltage'], VOLT_UNIT)
    dom_info_dict['rx1power'] = strip_unit_and_beautify(dom_info_dict['rx1power'], POWER_UNIT)
    dom_info_dict['rx2power'] = strip_unit_and_beautify(dom_info_dict['rx2power'], POWER_UNIT)
    dom_info_dict['rx3power'] = strip_unit_and_beautify(dom_info_dict['rx3power'], POWER_UNIT)
    dom_info_dict['rx4power'] = strip_unit_and_beautify(dom_info_dict['rx4power'], POWER_UNIT)
    dom_info_dict['tx1bias'] = strip_unit_and_beautify(dom_info_dict['tx1bias'], BIAS_UNIT)
    dom_info_dict['tx2bias'] = strip_unit_and_beautify(dom_info_dict['tx2bias'], BIAS_UNIT)
    dom_info_dict['tx3bias'] = strip_unit_and_beautify(dom_info_dict['tx3bias'], BIAS_UNIT)
    dom_info_dict['tx4bias'] = strip_unit_and_beautify(dom_info_dict['tx4bias'], BIAS_UNIT)
    dom_info_dict['tx1power'] = strip_unit_and_beautify(dom_info_dict['tx1power'], POWER_UNIT)
    dom_info_dict['tx2power'] = strip_unit_and_beautify(dom_info_dict['tx2power'], POWER_UNIT)
    dom_info_dict['tx3power'] = strip_unit_and_beautify(dom_info_dict['tx3power'], POWER_UNIT)
    dom_info_dict['tx4power'] = strip_unit_and_beautify(dom_info_dict['tx4power'], POWER_UNIT)

# update all the sfp info to db
def post_port_sfp_info_to_db(logical_port_name, table):
    ganged_port = False
    ganged_member_num = 1

    physical_port_list = logical_port_name_to_physical_port_list(logical_port_name)
    if physical_port_list is None:
        log_error("Error: No physical ports found for logical port '%s'" % logical_port_name)
        return PHYSICAL_PORT_NOT_EXIST

    if len(physical_port_list) > 1:
        ganged_port = True

    for physical_port in physical_port_list:
        if not platform_sfputil.get_presence(physical_port):
            return SFP_EEPROM_NOT_READY

        port_name = get_physical_port_name(logical_port_name, ganged_member_num, ganged_port)
        ganged_member_num += 1

        try:
            port_info_dict = platform_sfputil.get_transceiver_info_dict(physical_port)
            if port_info_dict is not None:
                fvs = swsscommon.FieldValuePairs([('type', port_info_dict['type']),
                                                  ('hardwarerev', port_info_dict['hardwarerev']),
                                                  ('serialnum', port_info_dict['serialnum']),
                                                  ('manufacturename', port_info_dict['manufacturename']),
                                                  ('modelname', port_info_dict['modelname'])])
                table.set(port_name, fvs)
            else:
                return SFP_EEPROM_NOT_READY

        except NotImplementedError:
            log_error("This functionality is currently not implemented for this platform")
            sys.exit(3)

    return SFP_EEPROM_HANDLE_SUCCESS

# update dom sensor info to db
def post_port_dom_info_to_db(logical_port_name, table):
    ganged_port = False
    ganged_member_num = 1

    physical_port_list = logical_port_name_to_physical_port_list(logical_port_name)
    if physical_port_list is None:
        log_error("Error: No physical ports found for logical port '%s'" % logical_port_name)
        return PHYSICAL_PORT_NOT_EXIST

    if len(physical_port_list) > 1:
        ganged_port = True

    for physical_port in physical_port_list:
        if not platform_sfputil.get_presence(physical_port):
            continue

        port_name = get_physical_port_name(logical_port_name, ganged_member_num, ganged_port)
        ganged_member_num += 1

        try:
            dom_info_dict = platform_sfputil.get_transceiver_dom_info_dict(physical_port)
            if dom_info_dict is not None:
                beautify_dom_info_dict(dom_info_dict)
                fvs = swsscommon.FieldValuePairs([('temperature', dom_info_dict['temperature']),
                                                  ('voltage', dom_info_dict['voltage']),
                                                  ('rx1power', dom_info_dict['rx1power']),
                                                  ('rx2power', dom_info_dict['rx2power']),
                                                  ('rx3power', dom_info_dict['rx3power']),
                                                  ('rx4power', dom_info_dict['rx4power']),
                                                  ('tx1bias', dom_info_dict['tx1bias']),
                                                  ('tx2bias', dom_info_dict['tx2bias']),
                                                  ('tx3bias', dom_info_dict['tx3bias']),
                                                  ('tx4bias', dom_info_dict['tx4bias']),
                                                  ('tx1power', dom_info_dict['tx1power']),
                                                  ('tx2power', dom_info_dict['tx2power']),
                                                  ('tx3power', dom_info_dict['tx3power']),
                                                  ('tx4power', dom_info_dict['tx4power'])])
                table.set(port_name, fvs)
            else:
                return SFP_EEPROM_NOT_READY

        except NotImplementedError:
            log_error("This functionality is currently not implemented for this platform")
            sys.exit(3)

# del sfp and dom info from db
def del_port_sfp_dom_info_to_db(logical_port_name, int_tbl, dom_tbl):
    ganged_port = False
    ganged_member_num = 1

    physical_port_list = logical_port_name_to_physical_port_list(logical_port_name)
    if physical_port_list is None:
        log_error("Error: No physical ports found for logical port '%s'" % logical_port_name)
        return PHYSICAL_PORT_NOT_EXIST

    if len(physical_port_list) > 1:
        ganged_port = True

    for physical_port in physical_port_list:
        port_name = get_physical_port_name(logical_port_name, ganged_member_num, ganged_port)
        ganged_member_num += 1

        try:
            int_tbl._del(port_name)
            dom_tbl._del(port_name)

        except NotImplementedError:
            log_error("This functionality is currently not implemented for this platform")
            sys.exit(3)

# recover missing sfp table entries if any
def recover_missing_sfp_table_entries(sfp_util, int_tbl):
    keys = int_tbl.getKeys()
    logical_port_list = sfp_util.logical
    for logical_port_name in logical_port_list:
        if logical_port_name not in keys:
            rc = post_port_sfp_info_to_db(logical_port_name, int_tbl)
            if rc == SFP_EEPROM_HANDLE_SUCCESS:
                log_info("Port {} has been recovered".format(logical_port_name))

def mapping_event_from_change_event(status, port_dict):
    """
    mapping from what get_transceiver_change_event returns to event defined in the state machine
    the logic is pretty straightforword
    """
    if status:
        if bool(port_dict):
            event = NORMAL_EVENT
        else:
            event = SYSTEM_BECOME_READY
            # here, a simple timeout event whose port_dict is empty is mapped
            # into a SYSTEM_BECOME_READY event so that it can be handled
            port_dict[EVENT_ON_ALL_SFP] = SYSTEM_BECOME_READY
    else:
        if EVENT_ON_ALL_SFP in port_dict.keys():
            event = port_dict[EVENT_ON_ALL_SFP]
        else:
            # this should not happen. just for protection
            event = SYSTEM_FAIL
            port_dict[EVENT_ON_ALL_SFP] = SYSTEM_FAIL

    return event

def waiting_time_compensation_with_sleep(time_start, time_to_wait):
    time_now = time.time()
    time_diff = time_now - time_start
    if time_diff < time_to_wait:
        time.sleep(time_to_wait - time_diff)

def wait_for_all_ports_configured():
    # Connect to APPL_DB and subscribe to PORT table notifications
    appl_db = swsscommon.DBConnector(swsscommon.APPL_DB,
                                     REDIS_HOSTNAME,
                                     REDIS_PORT,
                                     REDIS_TIMEOUT_MSECS)
    sel = swsscommon.Select()
    sst = swsscommon.SubscriberStateTable(appl_db, swsscommon.APP_PORT_TABLE_NAME)
    sel.addSelectable(sst)

    # Make sure this daemon started after all port configured.
    while XCVRD_MAIN_TASK_RUNNING_FLAG:
        (state, c) = sel.select(SELECT_TIMEOUT_MSECS)
        if state == swsscommon.Select.TIMEOUT:
            continue
        if state != swsscommon.Select.OBJECT:
            log_warning("sel.select() did not return swsscommon.Select.OBJECT")
            continue

        (key, op, fvp) = sst.pop()
        if key in ["PortConfigDone", "PortInitDone"]:
            break
    # Close the unused socket to prevent mem-leak. Since Xcvrd opens socket to subscribe to
    # APP_DB's PORT_TABLE events, if Xcvrd doesnot listen on the opened socket, then over a
    # period of time, redis-DB Send-Q will accumulate events(Eg due to continous port flap)
    # that can grow up slowly over a period of time resulting in memory leak.
    sel.removeSelectable(sst)

# Timer thread wrapper class to update dom info to DB periodically
class dom_info_update_task:
    def __init__(self, table):
        self.task_stopping_event = threading.Event()
        self.task_timer = None
        self.dom_table = table

    def task_run(self):
        if self.task_stopping_event.isSet():
            log_error("Error: dom info update thread received stop event, exiting...")
            return

        logical_port_list = platform_sfputil.logical
        for logical_port_name in logical_port_list:
            post_port_dom_info_to_db(logical_port_name, self.dom_table)

        self.task_timer = threading.Timer(DOM_INFO_UPDATE_PERIOD_SECS, self.task_run)
        self.task_timer.start()

    def task_stop(self):
        self.task_stopping_event.set()
        self.task_timer.join()

#=============================== Main ================================

def main():
    log_info("Starting up...")

    # Register our signal handlers
    signal.signal(signal.SIGHUP, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # Load platform-specific sfputil class
    err = load_platform_sfputil()
    if err != 0:
        log_error("failed to load sfputil")
        sys.exit(1)

    # Load port info
    try:
        port_config_file_path = get_path_to_port_config_file()
        platform_sfputil.read_porttab_mappings(port_config_file_path)
        # platform_sfputil.read_port_mappings()
    except Exception, e:
        log_error("Error reading port info (%s)" % str(e), True)
        sys.exit(2)

    # Connect to STATE_DB and create transceiver info/dom info table
    state_db = swsscommon.DBConnector(swsscommon.STATE_DB,
                                     REDIS_HOSTNAME,
                                     REDIS_PORT,
                                     REDIS_TIMEOUT_MSECS)
    int_tbl = swsscommon.Table(state_db, "TRANSCEIVER_INFO")
    dom_tbl = swsscommon.Table(state_db, "TRANSCEIVER_DOM_SENSOR")


    wait_for_all_ports_configured()

    # Post all the current interface SFP info to STATE_DB
    logical_port_list = platform_sfputil.logical
    for logical_port_name in logical_port_list:
        post_port_sfp_info_to_db(logical_port_name, int_tbl)
        post_port_dom_info_to_db(logical_port_name, dom_tbl)

    # Start the dom sensor info update timer thread
    dom_info_update = dom_info_update_task(dom_tbl)
    dom_info_update.task_run()

    # Start main loop to listen to the SFP change event.
    # The state migrating sequence:
    # 1. When the system starts, it is in "INIT" state, calling get_transceiver_change_event
    #    with RETRY_PERIOD_FOR_SYSTEM_READY_MSECS as timeout for before reach RETRY_TIMES_FOR_SYSTEM_READY
    #    times, otherwise it will transition to "EXIT" state
    # 2. Once 'system_become_ready' returned, the system enters "SYSTEM_READY" state and starts to monitor
    #    the insertion/removal event of all the SFP modules.
    #    In this state, receiving any system level event will be treated as an error and cause transition to
    #    "INIT" state
    # 3. When system back to "INIT" state, it will continue to handle system fail event, and retry until reach
    #    RETRY_TIMES_FOR_SYSTEM_READY times, otherwise it will transition to "EXIT" state

    # states definition
    # - Initial state: INIT, before received system ready or a normal event
    # - Final state: EXIT
    # - other state: NORMAL, after has received system-ready or a normal event

    # events definition
    # - SYSTEM_NOT_READY
    # - SYSTEM_BECOME_READY
    #   -
    # - NORMAL_EVENT
    #   - sfp insertion/removal
    #   - timeout returned by sfputil.get_change_event with status = true
    # - SYSTEM_FAIL

    # State transition:
    # 1. SYSTEM_NOT_READY
    #     - INIT
    #       - retry < RETRY_TIMES_FOR_SYSTEM_READY
    #             retry ++
    #       - else
    #             max retry reached, treat as fatal, transition to EXIT
    #     - NORMAL
    #         Treat as an error, transition to INIT
    # 2. SYSTEM_BECOME_READY
    #     - INIT
    #         transition to NORMAL
    #     - NORMAL
    #         log the event
    #         nop
    # 3. NORMAL_EVENT
    #     - INIT (for the vendors who don't implement SYSTEM_BECOME_READY)
    #         transition to NORMAL
    #         handle the event normally
    #     - NORMAL
    #         handle the event normally
    # 4. SYSTEM_FAIL
    #     - INIT
    #       - retry < RETRY_TIMES_FOR_SYSTEM_READY
    #             retry ++
    #       - else
    #             max retry reached, treat as fatal, transition to EXIT
    #     - NORMAL
    #         Treat as an error, transition to INIT


    # State           event               next state
    # INIT            SYSTEM NOT READY    INIT / EXIT
    # INIT            SYSTEM FAIL         INIT / EXIT
    # INIT            SYSTEM BECOME READY NORMAL
    # NORMAL          SYSTEM BECOME READY NORMAL
    # NORMAL          SYSTEM FAIL         INIT
    # INIT/NORMAL     NORMAL EVENT        NORMAL
    # NORMAL          SYSTEM NOT READY    INIT
    # EXIT            -

    log_info("Start main loop")
    time_last_recovery_run = time.time()
    retry = 0
    timeout = RETRY_PERIOD_FOR_SYSTEM_READY_MSECS
    state = STATE_INIT
    while XCVRD_MAIN_TASK_RUNNING_FLAG:
        next_state = state
        time_start = time.time()
        status, port_dict = platform_sfputil.get_transceiver_change_event(timeout)
        event = mapping_event_from_change_event(status, port_dict)

        if event == SYSTEM_NOT_READY:
            if state == STATE_INIT:
                # system not ready, wait and retry
                if retry >= RETRY_TIMES_FOR_SYSTEM_READY:
                    log_error("System failed to get ready in {} secs. Exiting...".format((RETRY_PERIOD_FOR_SYSTEM_READY_MSECS/1000)*RETRY_TIMES_FOR_SYSTEM_READY))
                    next_state = STATE_EXIT
                else:
                    retry = retry + 1

                    # get_transceiver_change_event may return immediately,
                    # we want the retry expired in expected time period,
                    # So need to calc the time diff,
                    # if time diff less that the pre-defined waiting time,
                    # use sleep() to complete the time.
                    waiting_time_compensation_with_sleep(time_start, RETRY_PERIOD_FOR_SYSTEM_READY_MSECS/1000)
            elif state == STATE_NORMAL:
                log_error("Got system_not_ready in normal state, treat as error, transition to INIT...")
                next_state = STATE_INIT
                timeout = RETRY_PERIOD_FOR_SYSTEM_READY_MSECS
                retry = 0
            else:
                next_state = STATE_EXIT
        elif event == SYSTEM_BECOME_READY:
            if state == STATE_INIT:
                next_state = STATE_NORMAL
                log_info("Got system_become_ready in init state, transition to normal state")
            elif state == STATE_NORMAL:
                next_state = STATE_NORMAL
            else:
                next_state = STATE_EXIT


        elif event == NORMAL_EVENT:
            if state == STATE_NORMAL or state == STATE_INIT:
                if state == STATE_INIT:
                    next_state = STATE_NORMAL
                # this is the originally logic that handled the transceiver change event
                # this can be reached in two cases:
                #   1. the state has been normal before got the event
                #   2. the state was init and is transition to normal after got the event.
                #      this is for the vendors who don't implement "system_not_ready/system_becom_ready" logic
                for key, value in port_dict.iteritems():
                    logical_port_list = platform_sfputil.get_physical_to_logical(int(key))
                    for logical_port in logical_port_list:
                        if value == SFP_STATUS_INSERTED:
                            log_info("Got SFP inserted event")
                            rc = post_port_sfp_info_to_db(logical_port, int_tbl)
                            # If we didn't get the sfp info, assuming the eeprom is not ready, give a try again.
                            if rc == SFP_EEPROM_NOT_READY:
                                log_info("Port {} isn't present when got SFP insert event".format(logical_port))
                                retry = 0
                                while retry <= RETRIES_FOR_SPF_READY:
                                    time.sleep(TIME_FOR_SFP_READY_SECS)
                                    rc = post_port_sfp_info_to_db(logical_port, int_tbl)
                                    if rc == SFP_EEPROM_NOT_READY:
                                        log_info("Port {} isn't present when got SFP insert event, retry {}".format(logical_port, retry))
                                        retry = retry + 1
                                    else:
                                        break
                            else:
                                log_info("get sfp info successfully {}, push to db".format(logical_port))
                            post_port_dom_info_to_db(logical_port, dom_tbl)

                        elif value == SFP_STATUS_REMOVED:
                            log_info("Got SFP removed event")
                            del_port_sfp_dom_info_to_db(logical_port, int_tbl, dom_tbl)
                        else:
                            # TODO, SFP return error code, need handle accordingly.
                            log_warning("Got unknown event {}, ignored".format(value))
                            continue
            else:
                next_state = STATE_EXIT

        elif event == SYSTEM_FAIL:
            if state == STATE_INIT:
                # To overcome a case that system is only temporarily not available,
                # when get system fail event will wait and retry for a certain period,
                # if system recovered in this period xcvrd will transit to INIT state
                # and continue run, if can not recover then exit.
                if retry >= RETRY_TIMES_FOR_SYSTEM_FAIL:
                    log_error("System failed to recover in {} secs. Exiting...".format((RETRY_PERIOD_FOR_SYSTEM_FAIL_MSECS/1000)*RETRY_TIMES_FOR_SYSTEM_FAIL))
                    next_state = STATE_EXIT
                else:
                    retry = retry + 1
                    waiting_time_compensation_with_sleep(time_start, RETRY_PERIOD_FOR_SYSTEM_FAIL_MSECS/1000)
            elif state == STATE_NORMAL:
                log_error("Got system_fail in normal state, treat as error, transition to INIT...")
                next_state = STATE_INIT
                timeout = RETRY_PERIOD_FOR_SYSTEM_FAIL_MSECS
                retry = 0
            else:
                next_state = STATE_EXIT
        else:
            log_warning("Got unknown event {} on state {}.".format(event, state))

        if next_state != state:
            log_info("State transition from {} to {}".format(state, next_state))
            state = next_state

        if next_state == STATE_EXIT:
            break
        elif next_state == STATE_NORMAL:
            # When transit to normal state time out will be changed
            timeout = XCVRD_MAIN_THREAD_SLEEP_MSECS

        time_now = time.time()
        time_diff = time_now - time_last_recovery_run
        # time.time() returns value in unit of seconds while XCVRD_MAIN_THREAD_SLEEP_MSECS is defined in unit of milliseconds
        if time_diff * 1000 > XCVRD_MAIN_THREAD_SLEEP_MSECS:
            recover_missing_sfp_table_entries(platform_sfputil, int_tbl)
            time_last_recovery_run = time_now

    # Stop the dom info update timer
    dom_info_update.task_stop()

    # Clean all the information from DB and then exit
    logical_port_list = platform_sfputil.logical
    for logical_port_name in logical_port_list:
        del_port_sfp_dom_info_to_db(logical_port_name, int_tbl, dom_tbl)
    log_error("Xcvrd main task stopped, exiting...")
    return 1

if __name__ == '__main__':
    sys.exit(main())
